{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/kumarprince87/Exploratory-Data-Analysis/blob/main/EDA_using_Naive_Bayes_Classifier.ipynb\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 1,
      "id": "918cec7d",
      "metadata": {
        "id": "918cec7d"
      },
      "outputs": [],
      "source": [
        "import numpy as np\n",
        "from sklearn.datasets import fetch_20newsgroups\n",
        "from sklearn.feature_extraction.text import CountVectorizer\n",
        "from sklearn.feature_extraction.text import TfidfTransformer\n",
        "from sklearn.naive_bayes import MultinomialNB\n",
        "from sklearn.pipeline import Pipeline"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "id": "744294f4",
      "metadata": {
        "id": "744294f4"
      },
      "outputs": [],
      "source": [
        "from sklearn.datasets import fetch_20newsgroups"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "id": "0839fa34",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0839fa34",
        "outputId": "3d2bb421-472e-4c6d-d9d5-034e7149f9fd"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['comp.graphics', 'rec.motorcycles', 'sci.electronics', 'sci.med']\n",
            "From: kreyling@lds.loral.com (Ed Kreyling 6966)\n",
            "Subject: Sun-os and 8bit ASCII graphics\n",
            "Organization: Loral Data Systems\n",
            "comp.graphics\n",
            "comp.graphics\n",
            "comp.graphics\n",
            "rec.motorcycles\n",
            "comp.graphics\n",
            "sci.med\n",
            "sci.electronics\n",
            "sci.electronics\n",
            "comp.graphics\n",
            "rec.motorcycles\n",
            "sci.electronics\n"
          ]
        }
      ],
      "source": [
        "categories = ['rec.motorcycles', 'sci.electronics',\n",
        "              'comp.graphics', 'sci.med']\n",
        "train_data = fetch_20newsgroups(subset='train',\n",
        "                               categories=categories, shuffle=True, random_state=42)\n",
        "\n",
        "print(train_data.target_names)\n",
        "\n",
        "print(\"\\n\".join(train_data.data[0].split(\"\\n\")[:3]))\n",
        "print(train_data.target_names[train_data.target[0]])\n",
        "\n",
        "for t in train_data.target[:10]:\n",
        "    print(train_data.target_names[t])\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "id": "13a442e3",
      "metadata": {
        "id": "13a442e3"
      },
      "outputs": [],
      "source": [
        "\n",
        "count_vect = CountVectorizer()\n",
        "X_train_counts = count_vect.fit_transform(train_data.data)\n",
        "\n",
        "tfidf_transformer = TfidfTransformer()\n",
        "X_train_tfidf = tfidf_transformer.fit_transform(X_train_counts)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "id": "d237ebdb",
      "metadata": {
        "id": "d237ebdb"
      },
      "outputs": [],
      "source": [
        "\n",
        "clf = MultinomialNB().fit(X_train_tfidf, train_data.target)\n",
        "\n",
        "docs_new = ['I have a Harley Davidson and Yamaha.', 'I have a GTX 1050 GPU']\n",
        "X_new_counts = count_vect.transform(docs_new)\n",
        "X_new_tfidf = tfidf_transformer.transform(X_new_counts)\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "id": "9c0ea604",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "9c0ea604",
        "outputId": "40a4a187-6dd3-4cd3-a86c-2b4405e08f43"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "'I have a Harley Davidson and Yamaha.' => rec.motorcycles\n",
            "'I have a GTX 1050 GPU' => sci.med\n"
          ]
        }
      ],
      "source": [
        "predicted = clf.predict(X_new_tfidf)\n",
        "\n",
        "for doc, category in zip(docs_new, predicted):\n",
        "    print('%r => %s' % (doc, train_data.target_names[category]))\n"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "id": "a6204c80",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "a6204c80",
        "outputId": "5fa3cefe-159f-4ab8-dd2a-b1658640b17e"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "We got an accuracy of 91.49746192893402 % over the test data.\n"
          ]
        }
      ],
      "source": [
        "\n",
        "text_clf = Pipeline([\n",
        "    ('vect', CountVectorizer()),\n",
        "    ('tfidf', TfidfTransformer()),\n",
        "    ('clf', MultinomialNB()),\n",
        "])\n",
        "text_clf.fit(train_data.data, train_data.target) \n",
        "test_data = fetch_20newsgroups(subset='test',\n",
        "                               categories=categories, shuffle=True, random_state=42)\n",
        "docs_test = test_data.data\n",
        "predicted = text_clf.predict(docs_test)\n",
        "print('We got an accuracy of',np.mean(predicted == test_data.target)*100, '% over the test data.')\n"
      ]
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3 (ipykernel)",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.10.8"
    },
    "colab": {
      "provenance": [],
      "include_colab_link": true
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}
